Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.


Input: nums = [2,7,11,15], target = 9, Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].



from typing import List

class Solution(object):
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """

        #We use a dictionary to save the elements and index we've already     
        #checked as a key and pair respectively. 
        
        #At the worst case scenario, we go
        #through the *entire* list once. Thus O(n)

        prevElements = {}

        #enumerate() returns the index and value of a list

        for index, value in enumerate(nums):
            diff = target - value

            if diff in prevElements:
                return [prevElements[diff], index]

            #Assign value as a key to its respective index
            prevElements[value] = index
